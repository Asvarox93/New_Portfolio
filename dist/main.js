"use strict";
"use strict";
"use strict";
"use strict";
"use strict";$(".contact-form").submit(function(t){$.ajax({type:"POST",url:"contact-form-sender.php",data:$(".contact-form").serialize(),success:function(t){0==t?$(".contact-form-alert").html('<div class="alert alert-danger" role="alert">Coś poszło nie tak! Proszę sprawdzić formularz.</div>'):2==t?$(".contact-form-alert").html('<div class="alert alert-danger" role="alert">Coś poszło nie tak! Proszę spróbować pożniej.</div>'):1==t&&($(".contact-form-alert").html('<div class="alert alert-success" role="alert">Wiadomość została wysłana pomyślnie!</div>'),$(".contact-form").trigger("reset"),$(".contact-form-alert").fadeOut(4e3,function(){$(".contact-form-alert").hide()}))}}),t.preventDefault()});
"use strict";
"use strict";
"use strict";
"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};$(window).on("load",function(){$(".spinner-wrapper").fadeOut(500)}),function(){var u,l,c,a,o={frameRate:150,animationTime:400,stepSize:100,pulseAlgorithm:!0,pulseScale:4,pulseNormalize:1,accelerationDelta:50,accelerationMax:3,keyboardSupport:!0,arrowScroll:50,fixedBackground:!0,excluded:""},w=o,s=!1,d=!1,n={x:0,y:0},f=!1,m=document.documentElement,i=[],h=/^Mac/.test(navigator.platform),p={left:37,up:38,right:39,down:40,spacebar:32,pageup:33,pagedown:34,end:35,home:36},y={37:1,38:1,39:1,40:1};function v(){if(!f&&document.body){f=!0;var e=document.body,t=document.documentElement,o=window.innerHeight,n=e.scrollHeight;if(m=0<=document.compatMode.indexOf("CSS")?t:e,u=e,w.keyboardSupport&&Y("keydown",x),top!=self)d=!0;else if(Q&&o<n&&(e.offsetHeight<=o||t.offsetHeight<=o)){var r,a=document.createElement("div");a.style.cssText="position:absolute; z-index:-10000; top:0; left:0; right:0; height:"+m.scrollHeight+"px",document.body.appendChild(a),c=function(){r=r||setTimeout(function(){s||(a.style.height="0",a.style.height=m.scrollHeight+"px",r=null)},500)},setTimeout(c,10),Y("resize",c);if((l=new R(c)).observe(e,{attributes:!0,childList:!0,characterData:!1}),m.offsetHeight<=o){var i=document.createElement("div");i.style.clear="both",e.appendChild(i)}}w.fixedBackground||s||(e.style.backgroundAttachment="scroll",t.style.backgroundAttachment="scroll")}}var b=[],g=!1,r=Date.now();function S(f,m,h){if(function(e,t){e=0<e?1:-1,t=0<t?1:-1,n.x===e&&n.y===t||(n.x=e,n.y=t,b=[],r=0)}(m,h),1!=w.accelerationMax){var e=Date.now()-r;if(e<w.accelerationDelta){var t=(1+50/e)/2;1<t&&(t=Math.min(t,w.accelerationMax),m*=t,h*=t)}r=Date.now()}if(b.push({x:m,y:h,lastX:m<0?.99:-.99,lastY:h<0?.99:-.99,start:Date.now()}),!g){var o=q(),p=f===o||f===document.body;null==f.$scrollBehavior&&function(e){var t=M(e);if(null==B[t]){var o=getComputedStyle(e,"")["scroll-behavior"];B[t]="smooth"==o}return B[t]}(f)&&(f.$scrollBehavior=f.style.scrollBehavior,f.style.scrollBehavior="auto");j(function e(t){for(var o=Date.now(),n=0,r=0,a=0;a<b.length;a++){var i=b[a],l=o-i.start,c=l>=w.animationTime,u=c?1:l/w.animationTime;w.pulseAlgorithm&&(u=V(u));var s=i.x*u-i.lastX>>0,d=i.y*u-i.lastY>>0;n+=s,r+=d,i.lastX+=s,i.lastY+=d,c&&(b.splice(a,1),a--)}p?window.scrollBy(n,r):(n&&(f.scrollLeft+=n),r&&(f.scrollTop+=r)),m||h||(b=[]),b.length?j(e,f,1e3/w.frameRate+1):(g=!1,null!=f.$scrollBehavior&&(f.style.scrollBehavior=f.$scrollBehavior,f.$scrollBehavior=null))},f,0),g=!0}}function e(e){f||v();var t=e.target;if(e.defaultPrevented||e.ctrlKey)return!0;if(A(u,"embed")||A(t,"embed")&&/\.pdf/i.test(t.src)||A(u,"object")||t.shadowRoot)return!0;var o=-e.wheelDeltaX||e.deltaX||0,n=-e.wheelDeltaY||e.deltaY||0;h&&(e.wheelDeltaX&&N(e.wheelDeltaX,120)&&(o=e.wheelDeltaX/Math.abs(e.wheelDeltaX)*-120),e.wheelDeltaY&&N(e.wheelDeltaY,120)&&(n=e.wheelDeltaY/Math.abs(e.wheelDeltaY)*-120)),o||n||(n=-e.wheelDelta||0),1===e.deltaMode&&(o*=40,n*=40);var r=z(t);return r?!!function(e){if(!e)return;i.length||(i=[e,e,e]);e=Math.abs(e),i.push(e),i.shift(),clearTimeout(a),a=setTimeout(function(){try{localStorage.SS_deltaBuffer=i.join(",")}catch(e){}},1e3);var t=120<e&&K(e);return!K(120)&&!K(100)&&!t}(n)||(1.2<Math.abs(o)&&(o*=w.stepSize/120),1.2<Math.abs(n)&&(n*=w.stepSize/120),S(r,o,n),e.preventDefault(),void C()):!d||!W||(Object.defineProperty(e,"target",{value:window.frameElement}),parent.wheel(e))}function x(e){var t=e.target,o=e.ctrlKey||e.altKey||e.metaKey||e.shiftKey&&e.keyCode!==p.spacebar;document.body.contains(u)||(u=document.activeElement);var n=/^(button|submit|radio|checkbox|file|color|image)$/i;if(e.defaultPrevented||/^(textarea|select|embed|object)$/i.test(t.nodeName)||A(t,"input")&&!n.test(t.type)||A(u,"video")||function(e){var t=e.target,o=!1;if(-1!=document.URL.indexOf("www.youtube.com/watch"))do{if(o=t.classList&&t.classList.contains("html5-video-controls"))break}while(t=t.parentNode);return o}(e)||t.isContentEditable||o)return!0;if((A(t,"button")||A(t,"input")&&n.test(t.type))&&e.keyCode===p.spacebar)return!0;if(A(t,"input")&&"radio"==t.type&&y[e.keyCode])return!0;var r=0,a=0,i=z(u);if(!i)return!d||!W||parent.keydown(e);var l=i.clientHeight;switch(i==document.body&&(l=window.innerHeight),e.keyCode){case p.up:a=-w.arrowScroll;break;case p.down:a=w.arrowScroll;break;case p.spacebar:a=-(e.shiftKey?1:-1)*l*.9;break;case p.pageup:a=.9*-l;break;case p.pagedown:a=.9*l;break;case p.home:i==document.body&&document.scrollingElement&&(i=document.scrollingElement),a=-i.scrollTop;break;case p.end:var c=i.scrollHeight-i.scrollTop-l;a=0<c?10+c:0;break;case p.left:r=-w.arrowScroll;break;case p.right:r=w.arrowScroll;break;default:return!0}S(i,r,a),e.preventDefault(),C()}function t(e){u=e.target}var k,D,M=(k=0,function(e){return e.uniqueID||(e.uniqueID=k++)}),E={},T={},B={};function C(){clearTimeout(D),D=setInterval(function(){E=T=B={}},1e3)}function H(e,t,o){for(var n=o?E:T,r=e.length;r--;)n[M(e[r])]=t;return t}function z(e){var t=[],o=document.body,n=m.scrollHeight;do{var r=(!1?E:T)[M(e)];if(r)return H(t,r);if(t.push(e),n===e.scrollHeight){var a=L(m)&&L(o)||X(m);if(d&&O(m)||!d&&a)return H(t,q())}else if(O(e)&&X(e))return H(t,e)}while(e=e.parentElement)}function O(e){return e.clientHeight+10<e.scrollHeight}function L(e){return"hidden"!==getComputedStyle(e,"").getPropertyValue("overflow-y")}function X(e){var t=getComputedStyle(e,"").getPropertyValue("overflow-y");return"scroll"===t||"auto"===t}function Y(e,t,o){window.addEventListener(e,t,o||!1)}function $(e,t,o){window.removeEventListener(e,t,o||!1)}function A(e,t){return e&&(e.nodeName||"").toLowerCase()===t.toLowerCase()}if(window.localStorage&&localStorage.SS_deltaBuffer)try{i=localStorage.SS_deltaBuffer.split(",")}catch(e){}function N(e,t){return Math.floor(e/t)==e/t}function K(e){return N(i[0],e)&&N(i[1],e)&&N(i[2],e)}var P,j=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(e,t,o){window.setTimeout(e,o||1e3/60)},R=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver,q=(P=document.scrollingElement,function(){if(!P){var e=document.createElement("div");e.style.cssText="height:10000px;width:1px;",document.body.appendChild(e);var t=document.body.scrollTop;document.documentElement.scrollTop,window.scrollBy(0,3),P=document.body.scrollTop!=t?document.body:document.documentElement,window.scrollBy(0,-3),document.body.removeChild(e)}return P});function _(e){var t;return((e*=w.pulseScale)<1?e-(1-Math.exp(-e)):(e-=1,(t=Math.exp(-1))+(1-Math.exp(-e))*(1-t)))*w.pulseNormalize}function V(e){return 1<=e?1:e<=0?0:(1==w.pulseNormalize&&(w.pulseNormalize/=_(1)),_(e))}var F=window.navigator.userAgent,I=/Edge/.test(F),W=/chrome/i.test(F)&&!I,U=/safari/i.test(F)&&!I,G=/mobile/i.test(F),J=/Windows NT 6.1/i.test(F)&&/rv:11/i.test(F),Q=U&&(/Version\/8/i.test(F)||/Version\/9/i.test(F)),Z=(W||U||J)&&!G,ee=!1;try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){ee=!0}}))}catch(e){}var te=!!ee&&{passive:!1},oe="onwheel"in document.createElement("div")?"wheel":"mousewheel";function ne(e){for(var t in e)o.hasOwnProperty(t)&&(w[t]=e[t])}oe&&Z&&(Y(oe,e,te),Y("mousedown",t),Y("load",v)),ne.destroy=function(){l&&l.disconnect(),$(oe,e),$("mousedown",t),$("keydown",x),$("resize",c),$("load",v)},window.SmoothScrollOptions&&ne(window.SmoothScrollOptions),"function"==typeof define&&define.amd?define(function(){return ne}):"object"==("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=ne:window.SmoothScroll=ne}();
"use strict";function onResize(o){var a=$(window).width(),i=$(".navigation_bar"),n=$(".navigation_menu");a<800?(n.hide(),i.show()):(n.show(),i.hide())}function onScroll(o){var i=$(document).scrollTop();i<100&&$(".navigation_scrollTop").hide(),100<i&&$(".navigation_scrollTop").show(),$(".navigation_items a").each(function(){var o=$(this);if("/"===o[0].pathname){var a=$(o.attr("href"));a.position().top-70<=i&&a.position().top+a.height()>=i?($(".navigation_items ul li a").removeClass("active"),o.addClass("active")):o.removeClass("active")}})}$(document).ready(function(){var o=$(".navigation_menu"),n=$(".navigation_bar");n.click(function(){$(this).toggleClass("navigation_bar--open"),o.toggle()}),onResize(),$(window).on("resize",onResize),$(document).on("scroll",onScroll),$('a[href^="#"]').on("click",function(o){o.preventDefault(),$(document).off("scroll"),onResize(),n.removeClass("navigation_bar--open"),$("a").each(function(){$(this).removeClass("active"),$(this).parent().removeClass("active")}),$(this).addClass("active"),$(this).parent().addClass("active");var a=this.hash,i=$(a).offset().top-70;$("html, body").stop().animate({scrollTop:i},500,"swing",function(){$(document).on("scroll",onScroll)})}),$(".navigation_scrollTop").on("click",function(o){$(".navigation_scrollTop").hide(),$('a[href="#header"]').parent().addClass("active"),$('a[href="#header"]').addClass("active")})});
"use strict";
"use strict";
//# sourceMappingURL=data:application/json;charset=utf8;base64,
