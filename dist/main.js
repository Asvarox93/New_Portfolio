"use strict";
"use strict";
"use strict";
"use strict";
"use strict";$(".contact-form").submit(function(t){$.ajax({type:"POST",url:"contact-form-sender.php",data:$(".contact-form").serialize(),success:function(t){0==t?$(".contact-form-alert").html('<div class="alert alert-danger" role="alert">Coś poszło nie tak! Proszę sprawdzić formularz.</div>'):2==t?$(".contact-form-alert").html('<div class="alert alert-danger" role="alert">Coś poszło nie tak! Proszę spróbować pożniej.</div>'):1==t&&($(".contact-form-alert").html('<div class="alert alert-success" role="alert">Wiadomość została wysłana pomyślnie!</div>'),$(".contact-form").trigger("reset"),$(".contact-form-alert").fadeOut(4e3,function(){$(".contact-form-alert").hide()}))}}),t.preventDefault()});
"use strict";
"use strict";
"use strict";
"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};$(window).on("load",function(){var e=500;$(".spinner-wrapper").fadeOut(e)}),function(){function e(){if(!C&&document.body){C=!0;var e=document.body,t=document.documentElement,o=window.innerHeight,r=e.scrollHeight;if(H=document.compatMode.indexOf("CSS")>=0?t:e,b=e,M.keyboardSupport&&f("keydown",n),top!=self)T=!0;else if(J&&r>o&&(e.offsetHeight<=o||t.offsetHeight<=o)){var a=document.createElement("div");a.style.cssText="position:absolute; z-index:-10000; top:0; left:0; right:0; height:"+H.scrollHeight+"px",document.body.appendChild(a);var i;S=function(){i||(i=setTimeout(function(){E||(a.style.height="0",a.style.height=H.scrollHeight+"px",i=null)},500))},setTimeout(S,10),f("resize",S);if((g=new q(S)).observe(e,{attributes:!0,childList:!0,characterData:!1}),H.offsetHeight<=o){var l=document.createElement("div");l.style.clear="both",e.appendChild(l)}}M.fixedBackground||E||(e.style.backgroundAttachment="scroll",t.style.backgroundAttachment="scroll")}}function t(e,t,o){if(function(e,t){e=e>0?1:-1,t=t>0?1:-1,(B.x!==e||B.y!==t)&&(B.x=e,B.y=t,Y=[],A=0)}(t,o),1!=M.accelerationMax){var n=Date.now()-A;if(n<M.accelerationDelta){var r=(1+50/n)/2;r>1&&(r=Math.min(r,M.accelerationMax),t*=r,o*=r)}A=Date.now()}if(Y.push({x:t,y:o,lastX:t<0?.99:-.99,lastY:o<0?.99:-.99,start:Date.now()}),!$){var a=_(),i=e===a||e===document.body;null==e.$scrollBehavior&&function(e){var t=N(e);if(null==j[t]){var o=getComputedStyle(e,"")["scroll-behavior"];j[t]="smooth"==o}return j[t]}(e)&&(e.$scrollBehavior=e.style.scrollBehavior,e.style.scrollBehavior="auto");R(function n(r){for(var a=Date.now(),l=0,c=0,u=0;u<Y.length;u++){var s=Y[u],d=a-s.start,f=d>=M.animationTime,m=f?1:d/M.animationTime;M.pulseAlgorithm&&(m=function(e){return e>=1?1:e<=0?0:(1==M.pulseNormalize&&(M.pulseNormalize/=y(1)),y(e))}(m));var h=s.x*m-s.lastX>>0,p=s.y*m-s.lastY>>0;l+=h,c+=p,s.lastX+=h,s.lastY+=p,f&&(Y.splice(u,1),u--)}i?window.scrollBy(l,c):(l&&(e.scrollLeft+=l),c&&(e.scrollTop+=c)),t||o||(Y=[]),Y.length?R(n,e,1e3/M.frameRate+1):($=!1,null!=e.$scrollBehavior&&(e.style.scrollBehavior=e.$scrollBehavior,e.$scrollBehavior=null))},e,0),$=!0}}function o(o){C||e();var n=o.target;if(o.defaultPrevented||o.ctrlKey)return!0;if(h(b,"embed")||h(n,"embed")&&/\.pdf/i.test(n.src)||h(b,"object")||n.shadowRoot)return!0;var r=-o.wheelDeltaX||o.deltaX||0,i=-o.wheelDeltaY||o.deltaY||0;O&&(o.wheelDeltaX&&p(o.wheelDeltaX,120)&&(r=o.wheelDeltaX/Math.abs(o.wheelDeltaX)*-120),o.wheelDeltaY&&p(o.wheelDeltaY,120)&&(i=o.wheelDeltaY/Math.abs(o.wheelDeltaY)*-120)),r||i||(i=-o.wheelDelta||0),1===o.deltaMode&&(r*=40,i*=40);var l=c(n);return l?!!function(e){if(!e)return;z.length||(z=[e,e,e]);e=Math.abs(e),z.push(e),z.shift(),clearTimeout(x),x=setTimeout(function(){try{localStorage.SS_deltaBuffer=z.join(",")}catch(e){}},1e3);var t=e>120&&w(e);return!w(120)&&!w(100)&&!t}(i)||(Math.abs(r)>1.2&&(r*=M.stepSize/120),Math.abs(i)>1.2&&(i*=M.stepSize/120),t(l,r,i),o.preventDefault(),void a()):!T||!I||(Object.defineProperty(o,"target",{value:window.frameElement}),parent.wheel(o))}function n(e){var o=e.target,n=e.ctrlKey||e.altKey||e.metaKey||e.shiftKey&&e.keyCode!==L.spacebar;document.body.contains(b)||(b=document.activeElement);var r=/^(button|submit|radio|checkbox|file|color|image)$/i;if(e.defaultPrevented||/^(textarea|select|embed|object)$/i.test(o.nodeName)||h(o,"input")&&!r.test(o.type)||h(b,"video")||function(e){var t=e.target,o=!1;if(-1!=document.URL.indexOf("www.youtube.com/watch"))do{if(o=t.classList&&t.classList.contains("html5-video-controls"))break}while(t=t.parentNode);return o}(e)||o.isContentEditable||n)return!0;if((h(o,"button")||h(o,"input")&&r.test(o.type))&&e.keyCode===L.spacebar)return!0;if(h(o,"input")&&"radio"==o.type&&X[e.keyCode])return!0;var i=0,l=0,u=c(b);if(!u)return!T||!I||parent.keydown(e);var s=u.clientHeight;switch(u==document.body&&(s=window.innerHeight),e.keyCode){case L.up:l=-M.arrowScroll;break;case L.down:l=M.arrowScroll;break;case L.spacebar:l=-(e.shiftKey?1:-1)*s*.9;break;case L.pageup:l=.9*-s;break;case L.pagedown:l=.9*s;break;case L.home:u==document.body&&document.scrollingElement&&(u=document.scrollingElement),l=-u.scrollTop;break;case L.end:var d=u.scrollHeight-u.scrollTop-s;l=d>0?d+10:0;break;case L.left:i=-M.arrowScroll;break;case L.right:i=M.arrowScroll;break;default:return!0}t(u,i,l),e.preventDefault(),a()}function r(e){b=e.target}function a(){clearTimeout(k),k=setInterval(function(){K=P=j={}},1e3)}function i(e,t,o){for(var n=o?K:P,r=e.length;r--;)n[N(e[r])]=t;return t}function l(e,t){return(t?K:P)[N(e)]}function c(e){var t=[],o=document.body,n=H.scrollHeight;do{var r=l(e,!1);if(r)return i(t,r);if(t.push(e),n===e.scrollHeight){var a=s(H)&&s(o)||d(H);if(T&&u(H)||!T&&a)return i(t,_())}else if(u(e)&&d(e))return i(t,e)}while(e=e.parentElement)}function u(e){return e.clientHeight+10<e.scrollHeight}function s(e){return"hidden"!==getComputedStyle(e,"").getPropertyValue("overflow-y")}function d(e){var t=getComputedStyle(e,"").getPropertyValue("overflow-y");return"scroll"===t||"auto"===t}function f(e,t,o){window.addEventListener(e,t,o||!1)}function m(e,t,o){window.removeEventListener(e,t,o||!1)}function h(e,t){return e&&(e.nodeName||"").toLowerCase()===t.toLowerCase()}function p(e,t){return Math.floor(e/t)==e/t}function w(e){return p(z[0],e)&&p(z[1],e)&&p(z[2],e)}function y(e){var t,o;return(e*=M.pulseScale)<1?t=e-(1-Math.exp(-e)):(e-=1,t=(o=Math.exp(-1))+(1-Math.exp(-e))*(1-o)),t*M.pulseNormalize}function v(e){for(var t in e)D.hasOwnProperty(t)&&(M[t]=e[t])}var b,g,S,x,k,D={frameRate:150,animationTime:400,stepSize:100,pulseAlgorithm:!0,pulseScale:4,pulseNormalize:1,accelerationDelta:50,accelerationMax:3,keyboardSupport:!0,arrowScroll:50,fixedBackground:!0,excluded:""},M=D,E=!1,T=!1,B={x:0,y:0},C=!1,H=document.documentElement,z=[],O=/^Mac/.test(navigator.platform),L={left:37,up:38,right:39,down:40,spacebar:32,pageup:33,pagedown:34,end:35,home:36},X={37:1,38:1,39:1,40:1},Y=[],$=!1,A=Date.now(),N=function(){var e=0;return function(t){return t.uniqueID||(t.uniqueID=e++)}}(),K={},P={},j={};if(window.localStorage&&localStorage.SS_deltaBuffer)try{z=localStorage.SS_deltaBuffer.split(",")}catch(e){}var R=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(e,t,o){window.setTimeout(e,o||1e3/60)},q=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver,_=function(){var e=document.scrollingElement;return function(){if(!e){var t=document.createElement("div");t.style.cssText="height:10000px;width:1px;",document.body.appendChild(t);var o=document.body.scrollTop;document.documentElement.scrollTop;window.scrollBy(0,3),e=document.body.scrollTop!=o?document.body:document.documentElement,window.scrollBy(0,-3),document.body.removeChild(t)}return e}}(),V=window.navigator.userAgent,F=/Edge/.test(V),I=/chrome/i.test(V)&&!F,W=/safari/i.test(V)&&!F,U=/mobile/i.test(V),G=/Windows NT 6.1/i.test(V)&&/rv:11/i.test(V),J=W&&(/Version\/8/i.test(V)||/Version\/9/i.test(V)),Q=(I||W||G)&&!U,Z=!1;try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){Z=!0}}))}catch(e){}var ee=!!Z&&{passive:!1},te="onwheel"in document.createElement("div")?"wheel":"mousewheel";te&&Q&&(f(te,o,ee),f("mousedown",r),f("load",e)),v.destroy=function(){g&&g.disconnect(),m(te,o),m("mousedown",r),m("keydown",n),m("resize",S),m("load",e)},window.SmoothScrollOptions&&v(window.SmoothScrollOptions),"function"==typeof define&&define.amd?define(function(){return v}):"object"==("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=v:window.SmoothScroll=v}();
"use strict";function onResize(o){var i=$(window).width(),n=$(".navigation_bar"),a=$(".navigation_menu");i<800?(a.hide(),n.show()):(a.show(),n.hide())}function onScroll(o){var i=$(document).scrollTop();$(".navigation_items a").each(function(){var o=$(this),n=$(o.attr("href"));n.position().top-70<=i&&n.position().top+n.height()>=i?($(".navigation_items ul li a").removeClass("active"),o.addClass("active")):o.removeClass("active")})}$(document).ready(function(){var o=$(".navigation_menu"),i=$(".navigation_bar");i.click(function(){$(this).toggleClass("navigation_bar--open"),o.toggle()}),onResize(),$(window).on("resize",onResize),$(document).on("scroll",onScroll),$('a[href^="#"]').on("click",function(o){o.preventDefault(),$(document).off("scroll"),onResize(),i.removeClass("navigation_bar--open"),$("a").each(function(){$(this).removeClass("active"),$(this).parent().removeClass("active")}),$(this).addClass("active"),$(this).parent().addClass("active");var n=this.hash,a=$(n).offset().top-70;$("html, body").stop().animate({scrollTop:a},500,"swing",function(){$(document).on("scroll",onScroll)})})});
"use strict";
"use strict";
//# sourceMappingURL=data:application/json;charset=utf8;base64,
